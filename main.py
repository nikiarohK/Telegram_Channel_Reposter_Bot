import asyncio
import json
import logging
from telethon import TelegramClient, events, utils
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from config import api_id, api_hash, bot_token, api_ai
from telethon import types
from openai import AsyncOpenAI


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='[%(levelname)s] %(asctime)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CHANNELS_FILE = "channels.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
telethon_client = TelegramClient('anon', api_id, api_hash)
bot = Bot(token=bot_token)
dp = Dispatcher()

def load_channels():
    try:
        with open(CHANNELS_FILE, "r") as f:
            data = json.load(f)
            return (
                set(map(str, data.get("active_channels", []))),
                str(data.get("main_channel_id")) if data.get("main_channel_id") else None,
                data.get("prompt", "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–æ –Ω–µ –º–µ–Ω—è–π —Å—É—Ç—å")  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
            )
    except (FileNotFoundError, json.JSONDecodeError):
        return set(), None, "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–æ –Ω–µ –º–µ–Ω—è–π —Å—É—Ç—å"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return set(), None, "–ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –Ω–æ –Ω–µ –º–µ–Ω—è–π —Å—É—Ç—å"

def save_channels():
    data = {
        "active_channels": list(active_channels),
        "main_channel_id": main_channel_id,
        "prompt": current_prompt  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    }
    try:
        with open(CHANNELS_FILE, "w") as f:
            json.dump(data, f, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
active_channels, main_channel_id, current_prompt = load_channels()

async def get_channel_id(link: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
    try:
        entity = await telethon_client.get_entity(link)
        return str(utils.get_peer_id(entity))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID: {e}")
        return None

@dp.message(Command("start", "help"))
async def start_command(message: Message):
    help_text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏\n\n"
        "üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/main_channel [—Å—Å—ã–ª–∫–∞] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª\n"
        "/add_channel [—Å—Å—ã–ª–∫–∞] - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/remove [—Å—Å—ã–ª–∫–∞] - –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
        "/list - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã\n"
        "/id [—Å—Å—ã–ª–∫–∞] - –ü–æ–∫–∞–∑–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n"
        "/change_promt [—Ç–µ–∫—Å—Ç] - –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è\n"
        "/show_promt - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç"
    )
    await message.answer(help_text)

@dp.message(Command("id"))
async def show_id(message: Message):
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
    
    channel_id = await get_channel_id(args[1])
    if channel_id:
        await message.reply(f"üÜî ID –∫–∞–Ω–∞–ª–∞: `{channel_id}`", parse_mode="Markdown")
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞")

@dp.message(Command("main_channel"))
async def set_main_channel(message: Message):
    global main_channel_id
    args = message.text.split()
    
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
    
    channel_id = await get_channel_id(args[1])
    if not channel_id:
        return await message.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    try:
        await telethon_client.send_message(entity=int(channel_id), message="üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
    except Exception as e:
        return await message.reply(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    main_channel_id = channel_id
    save_channels()
    await message.reply(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: `{channel_id}`", parse_mode="Markdown")

async def get_channel_id(link: str) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ß–∏—Å—Ç–∏–º —Å—Å—ã–ª–∫—É –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        link = link.strip().replace("https://t.me/", "").replace("@", "")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞
        entity = await telethon_client.get_entity(link)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        if isinstance(entity, (types.Channel, types.Chat)):
            return utils.get_peer_id(entity)
            
        return None
    except ValueError:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É, –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏
        try:
            await telethon_client.join_channel(link)
            entity = await telethon_client.get_entity(link)
            return utils.get_peer_id(entity)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {link}: {str(e)}")
            return None
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        return None

@dp.message(Command("add_channel"))
async def add_channel(message: Message):
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
    
    try:
        channel_id = await get_channel_id(args[1])
        if not channel_id:
            return await message.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")

        if channel_id not in active_channels:
            active_channels.add(channel_id)
            save_channels()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            entity = await telethon_client.get_entity(channel_id)
            await message.reply(
                f"‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {entity.title} (ID: `{channel_id}`)",
                parse_mode="Markdown"
            )
        else:
            await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
        
@dp.message(Command("remove"))
async def remove_channel(message: Message):
    args = message.text.split()
    if len(args) < 2:
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")
    
    channel_id = await get_channel_id(args[1])
    if not channel_id:
        return await message.reply("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if channel_id in active_channels:
        active_channels.remove(channel_id)
        save_channels()
        await message.reply(f"‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω: `{channel_id}`", parse_mode="Markdown")
    else:
        await message.reply("‚ÑπÔ∏è –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")

@dp.message(Command("list"))
async def list_channels(message: Message):
    if not active_channels:
        return await message.reply("‚ÑπÔ∏è –ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
    
    response = ["üìã –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:"]
    
    for idx, channel_id in enumerate(active_channels, 1):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            entity = await telethon_client.get_entity(int(channel_id))
            title = entity.title
        except Exception as e:
            title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel_id}: {str(e)}")
        
        response.append(f"{idx}. {title} (ID: `{channel_id}`)")

    await message.reply("\n".join(response), parse_mode="Markdown")

@dp.message(Command("status"))
async def status_check(message: Message):
    try:
        main_channel_info = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        if main_channel_id:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ
                entity = await telethon_client.get_entity(int(main_channel_id))
                main_channel_info = f"{entity.title} (ID: `{main_channel_id}`)"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {str(e)}")
                main_channel_info = f"ID: `{main_channel_id}` (–Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)"
        
        status = [
            f"üìå –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª: {main_channel_info}",
            f"üî¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(active_channels)}",
            f"üì° –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {'‚úÖ' if telethon_client.is_connected() else '‚ùå'}"
        ]
        
        await message.reply("\n".join(status), parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ status: {str(e)}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

@dp.message(Command("change_promt"))
async def change_prompt(message: Message):
    global current_prompt
    new_prompt = message.text.replace('/change_promt', '').strip()
    
    if not new_prompt:
        return await message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã")
    
    current_prompt = new_prompt
    save_channels()
    await message.reply(f"‚úÖ –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:\n`{new_prompt}`", parse_mode="Markdown")

@dp.message(Command("show_promt"))
async def show_prompt(message: Message):
    await message.reply(
        f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç:\n`{current_prompt}`", 
        parse_mode="Markdown"
    )

client_openai = AsyncOpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=api_ai,  # –í–∞—à –∫–ª—é—á OpenRouter
)

async def rewrite_text(text: str) -> str:
    """–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenRouter API"""
    try:
        response = await client_openai.chat.completions.create(
            model="deepseek/deepseek-r1-zero:free",
            messages=[
                {
                    "role": "system",
                    "content": f"{current_prompt}. –ù–µ –ø—Ä–∏–º–µ–Ω—è–π –Ω–∏–∫–∞–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–º–ø—Ç
                },
                {
                    "role": "user", 
                    "content": text
                }
            ],
            temperature=0.8,
            max_tokens=2000
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"OpenRouter API Error: {str(e)}")
        return None

@telethon_client.on(events.NewMessage)
async def message_handler(event):
    if not main_channel_id or str(event.chat_id) not in active_channels:
        return
    
    if event.out:
        return

    try:
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        original_text = event.message.text
        media = event.message.media
        entities = event.message.entities
        link_preview = isinstance(media, types.MessageMediaWebPage)

        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        modified_text = await rewrite_text(original_text) if original_text else None
        final_text = modified_text or original_text

        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
        send_args = {
            "entity": int(main_channel_id),
            "message": final_text,
            "file": media,
            "formatting_entities": entities,
            "link_preview": link_preview
        }

        # –£–±–∏—Ä–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∞ –¥–ª—è –º–µ–¥–∏–∞
        if media and not isinstance(media, types.MessageMediaWebPage):
            send_args["silent"] = True

        await telethon_client.send_message(**send_args)
        logger.info(f"–ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ: {event.chat_id} ‚Üí {main_channel_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {str(e)}")

async def main():
    # await telethon_client.start()
    logger.info("Telethon –∫–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

